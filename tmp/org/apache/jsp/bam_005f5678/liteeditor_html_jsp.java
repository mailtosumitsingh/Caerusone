/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: jetty/9.4.21.v20190926
 * Generated at: 2023-01-29 17:32:49 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.bam_005f5678;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class liteeditor_html_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("  <meta charset=\"UTF-8\">\r\n");
      out.write("  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\r\n");
      out.write("  <title>Editor</title>\r\n");
      out.write("  <style type=\"text/css\" media=\"screen\">\r\n");
      out.write("    body {\r\n");
      out.write("        overflow: hidden;\r\n");
      out.write("    }\r\n");
      out.write("    \r\n");
      out.write("    #editor2 { \r\n");
      out.write("        margin: 0;\r\n");
      out.write("        position: absolute;\r\n");
      out.write("        top: 0;\r\n");
      out.write("        bottom: 0;\r\n");
      out.write("        left: 0;\r\n");
      out.write("        right: 0;\r\n");
      out.write("    }\r\n");
      out.write("    #editor { \r\n");
      out.write("   \t\tposition: relative;\r\n");
      out.write("        width: 100%;\r\n");
      out.write("        height: 670px;\r\n");
      out.write("       }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write(".ace_gutter-cell.ace_breakpoint { \r\n");
      out.write("    border-radius: 20px 0px 0px 20px; \r\n");
      out.write("    box-shadow: inset 0px 0px 2px 2px red;\r\n");
      out.write("    background: #f0d0d0;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("    \r\n");
      out.write("  </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<div id=\"editor\">function foo(items) {\r\n");
      out.write("    var i;\r\n");
      out.write("    for (i = 0; i &lt; items.length; i++) {\r\n");
      out.write("        alert(\"Ace Rocks \" + items[i]);\r\n");
      out.write("    }\r\n");
      out.write("}</div>\r\n");
      out.write("        <script type=\"text/javascript\" src=\"/site/dojo/dojo/dojo.js\" djConfig=\"parseOnLoad: true\"></script>\r\n");
      out.write("    \r\n");
      out.write("<script src=\"/site/includes/js/ace/ace-uncompressed.js\" type=\"text/javascript\" ></script>\r\n");
      out.write("<script src=\"/site/includes/js/ace/theme-eclipse.js\" type=\"text/javascript\" charset=\"utf-8\"></script>\r\n");
      out.write("<script src=\"/site/includes/js/ace/mode-javascript.js\" type=\"text/javascript\" charset=\"utf-8\"></script>\r\n");
      out.write("<script src=\"/site/includes/js/ace/mode-java.js\" type=\"text/javascript\" charset=\"utf-8\"></script>\r\n");
      out.write("\r\n");
      out.write("\t<!--  <script type=\"text/javascript\" src=\"/site/dojo/dojo/dojo.js\" ></script>-->\r\n");
      out.write("\t\r\n");
      out.write("\t\t\t<script type=\"text/javascript\" >\r\n");
      out.write("\t\t\t ");

            String id  = request.getParameter("id") ;
            String  f  = request.getParameter("f") ;
            String msg = request.getParameter("msg") ;
            out.print("var id  = \""+ id + "\" ; " );
            out.print("var  f  = \""+ f + "\" ; " );
            out.print("var msg = \""+ msg +"\" ; " );
            
      out.write("\r\n");
      out.write("\t\t\t var editor = null;\r\n");
      out.write("\t\t\tfunction postFormWithContent(urlto,jsonContent,fun) {\r\n");
      out.write("\t\t\t\tdojo.xhrPost( {\r\n");
      out.write("\t\t\t\t\turl : urlto,\r\n");
      out.write("\t\t\t\t\tcontent: jsonContent,\r\n");
      out.write("\t\t\t\t\tload : function(response, ioArgs) {\r\n");
      out.write("\t\t\t\t\t\tif(fun!=null)\r\n");
      out.write("\t\t\t\t\t\t\tfun(response);\r\n");
      out.write("\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\terror : function(response, ioArgs) {\r\n");
      out.write("\t\t\t\t\t\tif(fun!=null)\r\n");
      out.write("\t\t\t\t\t\t\tfun(response);\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tfunction getValue(){\r\n");
      out.write("\t\t\t\treturn editor.getSession().getDocument().getValue();\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tfunction done(){\r\n");
      out.write("\t\t\t\tif (opener && !opener.closed){\r\n");
      out.write("\t\t\t\t\tvar editor_data = getValue();\r\n");
      out.write("\t\t\t\t\topener.globals[\"popupreturn\"]=editor_data;\r\n");
      out.write("\t\t\t\t\tvar msgData = {};\r\n");
      out.write("                    msgData.from=f;\r\n");
      out.write("                    msgData.target=msg;\r\n");
      out.write("                    msgData.id=id;\r\n");
      out.write("                    msgData.data=editor_data;\r\n");
      out.write("                    window.opener.postMessage(dojo.toJson(msgData), \"/\");\r\n");
      out.write("\t\t\t\t    opener.focus();\r\n");
      out.write("\t\t\t\t  }\r\n");
      out.write("\t\t\t\t  window.close();\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\tfunction compile(){\r\n");
      out.write("\t\t\t\tvar editor_data = getValue();\r\n");
      out.write("\t\t\t\tvar req ={};\r\n");
      out.write("\t\t\t\treq.code = editor_data;\r\n");
      out.write("\t\t\t\treq.name=dojo.byId(\"name\").value;\r\n");
      out.write("\t\t\t\tpostFormWithContent(\"/CompileJava\",req,function (res){alert(res);});\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\tfunction compileProcess(){\r\n");
      out.write("\t\t\t\tvar editor_data = getValue();\r\n");
      out.write("\t\t\t\tvar req ={};\r\n");
      out.write("\t\t\t\treq.code = editor_data;\r\n");
      out.write("\t\t\t\treq.name=dojo.byId(\"name\").value;\r\n");
      out.write("\t\t\t\tpostFormWithContent(\"/CompileProcess\",req,function (res){alert(res);});\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tfunction compileTitan(){\r\n");
      out.write("\t\t\t\tvar editor_data = getValue();\r\n");
      out.write("\t\t\t\tvar req ={};\r\n");
      out.write("\t\t\t\treq.code = editor_data;\r\n");
      out.write("\t\t\t\treq.name=dojo.byId(\"name\").value;\r\n");
      out.write("\t\t\t\tpostFormWithContent(\"/TitanCompile\",req,function (res){CKEDITOR.instances.editor1.setData(res)});\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tfunction compileJob(){\r\n");
      out.write("\t\t\t\tvar editor_data = getValue();\r\n");
      out.write("\t\t\t\tvar req ={};\r\n");
      out.write("\t\t\t\treq.code = editor_data;\r\n");
      out.write("\t\t\t\treq.name=dojo.byId(\"name\").value;\r\n");
      out.write("\t\t\t\tpostFormWithContent(\"/CompileJob\",req,function (res){alert(res);});\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t</script>\r\n");
      out.write("<script>\r\n");
      out.write("window.onload = function() {\r\n");
      out.write("    editor = ace.edit(\"editor\");\r\n");
      out.write("    editor.setTheme(\"ace/theme/eclipse\");\r\n");
      out.write("    var JavaMode = require(\"ace/mode/java\").Mode;\r\n");
      out.write("    editor.getSession().setMode(new JavaMode());\r\n");
      out.write("    editor.resize();\r\n");
      out.write("   // editor.focus();\r\n");
      out.write("    editor.getSession().setUseSoftTabs(true);\r\n");
      out.write("\teditor.getSession().on('change',function(evt) {\r\n");
      out.write("\t\tdocumentChanged(evt, editor);\r\n");
      out.write("\t});\r\n");
      out.write("\t\teditor.addEventListener(\"gutterclick\", function(e){ \r\n");
      out.write("\t\t    var target = e.htmlEvent.target;\r\n");
      out.write("\t\t    if (target.className.indexOf(\"ace_gutter-cell\") == -1) \r\n");
      out.write("\t\t        return; \r\n");
      out.write("\t\t    if (!editor.isFocused()) \r\n");
      out.write("\t\t        return; \r\n");
      out.write("\t\t    if (e.clientX > 25 + target.getBoundingClientRect().left) \r\n");
      out.write("\t\t        return; \r\n");
      out.write("\t\t    var row = e.row;\r\n");
      out.write("\t\t    if( e.editor.session.getBreakpoints()[row] ) {\r\n");
      out.write("\t\t    \te.editor.session.clearBreakpoint(row);\r\n");
      out.write("\t\t    \t//breakpointInSourceFile(index, row, false);\r\n");
      out.write("\t\t    }\r\n");
      out.write("\t\t    else {\r\n");
      out.write("\t\t    \te.editor.session.setBreakpoint(row);\r\n");
      out.write("\t\t    \t//breakpointInSourceFile(index, row, true);\r\n");
      out.write("\t\t    }\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\teditor.getSession().on(\"changeBreakpoint\", function(){\r\n");
      out.write("\t\tconsole.log(\"Breakpoint changes\");\r\n");
      out.write("\t});\r\n");
      out.write("\tif(opener!=null){\r\n");
      out.write("\t    editor.getSession().getDocument().setValue(opener.globals[\"popupreturn\"]);\r\n");
      out.write("\t\tdojo.byId(\"name\").value = opener.globals[\"popupreturn_name\"];\r\n");
      out.write("\t    }\r\n");
      out.write("\tfunction documentChanged(event, editor) {\r\n");
      out.write("    \tvar delta = event.data;\r\n");
      out.write("\t\tvar range = delta.range;\r\n");
      out.write("\t\tvar len, firstRow, f1;\r\n");
      out.write("\r\n");
      out.write("\t\tif (delta.action == \"insertText\") {\r\n");
      out.write("\t\t\tlen = range.end.row - range.start.row;\r\n");
      out.write("\t\t\tfirstRow = range.start.column == 0? range.start.row: range.start.row + 1;\r\n");
      out.write("\t\t} else if (delta.action == \"insertLines\") {\r\n");
      out.write("\t\t\tlen = range.end.row - range.start.row;\r\n");
      out.write("\t\t\tfirstRow = range.start.row;\r\n");
      out.write("\t\t} else if (delta.action == \"removeText\") {\r\n");
      out.write("            len = range.start.row - range.end.row;\r\n");
      out.write("\t\t\tfirstRow = range.start.row;\r\n");
      out.write("\t\t} else if (delta.action == \"removeLines\") {\r\n");
      out.write("\t\t\tlen = range.start.row - range.end.row;\r\n");
      out.write("\t\t\tfirstRow = range.start.row;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tvar breakpoints = editor.session.getBreakpoints();\r\n");
      out.write("\t\tvar newBreakpoints = [];\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tvar changed = false;\r\n");
      out.write("\t\tif (len > 0) {\r\n");
      out.write("\t\t\tfor( var index in breakpoints ) {\r\n");
      out.write("\t\t\t\tvar idx = parseInt(index);\r\n");
      out.write("\t\t\t\tif( idx < firstRow ) {\r\n");
      out.write("\t\t\t\t\tnewBreakpoints.push(idx);\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\telse {\r\n");
      out.write("\t\t\t\t\tchanged = true;\r\n");
      out.write("\t\t\t\t\tnewBreakpoints.push(idx+len);\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("        } else if (len < 0) {\r\n");
      out.write("        \tfor( var index in breakpoints ) {\r\n");
      out.write("\t\t\t\tvar idx = parseInt(index);\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("            \tif( idx < firstRow ) {\r\n");
      out.write("            \t\tnewBreakpoints.push(idx);\r\n");
      out.write("            \t}\r\n");
      out.write("            \telse if( (index < firstRow-len) && !newBreakpoints[firstRow]) {\r\n");
      out.write("            \t\tnewBreakpoints.push(firstRow);\r\n");
      out.write("            \t\tchanged = true;\r\n");
      out.write("            \t}\r\n");
      out.write("            \telse {\r\n");
      out.write("            \t\tnewBreakpoints.push(len+idx);\r\n");
      out.write("            \t\tchanged = true;\r\n");
      out.write("            \t}\r\n");
      out.write("            }\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tif( changed ) editor.session.setBreakpoints(newBreakpoints);\r\n");
      out.write("    }\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("\t\t\t<input type=\"hidden\" id=\"name\" ></input>\r\n");
      out.write("\t\t\t<input type=\"button\" onclick=\"done()\" value=\"Done\"></input>\r\n");
      out.write("\t\t\t<input  type=\"button\" onclick=\"compile()\" value=\"Compile\"></input>\r\n");
      out.write("\t\t\t<input  type=\"button\" onclick=\"compileProcess()\" value=\"Compile Process\"></input>\r\n");
      out.write("\t\t\t<input  type=\"button\" onclick=\"compileJob()\" value=\"Compile Job\"></input>\r\n");
      out.write("\t\t\t<input  type=\"button\" onclick=\"compileTitan()\" value=\"Compile Titan\"></input>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
