
import java.util.*;
import org.apache.camel.*;
import org.ptg.events.*;
import org.ptg.util.events.*;
import org.ptg.stream.*;
import org.ptg.util.*;
import java.io.*;
import java.lang.reflect.*;
import java.sql.*;
import java.text.*;
import java.util.regex.*;
import javassist.*;
import javassist.bytecode.annotation.*;

import javax.xml.bind.*;
import javax.xml.parsers.*;
import javax.xml.xpath.*;

import net.htmlparser.jericho.*;
import net.sf.ezmorph.*;
import net.sf.ezmorph.bean.*;
import net.sf.json.*;
import net.sf.json.util.*;

import org.apache.camel.builder.*;
import org.apache.camel.impl.*;
import org.apache.commons.collections.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.jexl2.*;
import org.apache.commons.jxpath.*;
import org.apache.commons.lang.*;
import org.apache.commons.lang.exception.*;
import org.apache.commons.lang.math.*;
import org.apache.commons.vfs.*;
import org.ptg.admin.*;
import org.ptg.cep.*;
import org.ptg.processors.*;
import org.ptg.script.ScriptEngine;
import org.ptg.stream.Stream;
import org.ptg.stream.StreamDefinition;
import org.ptg.stream.StreamManager;
import org.ptg.timer.QuartzEvent;
import org.ptg.timer.QuartzImmidiateEvent;
import org.ptg.util.db.DBHelper;
import org.ptg.util.thread.ThreadManager;
import org.ptg.util.titan.ITitanClass;
import org.ptg.util.titan.TitanCompiler;
import org.ptg.velocity.VelocityHelper;
import org.rosuda.REngine.Rserve.RserveException;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.yaml.snakeyaml.Yaml;

import com.google.protobuf.*;
import com.sun.tools.xjc.XJC2Task;
import org.quartz.Job;
import org.quartz.JobExecutionContext;
import org.quartz.JobExecutionException;
import org.ptg.tests.autometa.parser.*;
import static org.ptg.tests.autometa.AutoUtils.*;

import java.util.regex.Matcher;
import java.util.regex.Pattern;
import ch.hsr.geohash.*;

public class ${name} extends org.ptg.util.RowMapper{
${globalvarcode}
/*
main table is entered as "main"

**/

public List<Map>  map(Map<String,List<List<String>>>mapIn) {
if(mapIn==null)
	return null;
${initcode}
int totalRows = inputs.size();
List<Map> outputs = new ArrayList<Map>();
for(int currIndex=0;currIndex<inputs.size();currIndex++){
List in = inputs.get(currIndex);
${fillloop}
${initvarcode}
${code}


${finishloop}
}
return outputs;
}

public void init(){

}
public List<Map> process(String fileName, boolean hasHeader) throws Exception {
	CSVAnalyser a = new CSVAnalyser();
	//generated code
	Map<String, List<List<String>>> inputs = new HashMap<String, List<List<String>>>();
	${filemap}
	///
	return map(inputs);
}
public List<String> getOuts() {
		List<String> ret = new ArrayList<String>();
		${outStr}
		return ret;
	}

	public List<String> getIns() {
		List<String> ret = new ArrayList<String>();
		${inStr}
		return ret;
	}

}
